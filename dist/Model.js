import u from"./Backend.js";import f from"./WeakCache.js";import l from"./Subscription.js";import r from"./Value.js";import{genUri as h}from"./Util.js";export default class n{static setters=["set","clearValue","addValue","removeValue"];static actions=["load","reset","save","remove"];static cache=new f;static subscription=new l;static backend=new u;constructor(e){return typeof e=="string"?(this.id=e,this.#e=!1,this.#i=!1,this.#t=!1):typeof e>"u"?(this.id=h(),this.#e=!0,this.#i=!1,this.#t=!1):typeof e=="object"&&(Object.getOwnPropertyNames(e).forEach(i=>{if(i==="@"||i==="id")return this.id=e.id??e["@"]??h();const t=e[i];this[i]=Array.isArray(t)?t.map(r.parse):r.parse(t)}),this.#e=!1,this.#i=!0,this.#t=!0),this.subscribe(),n.cache.get(this.id)??(n.cache.set(this.id,this),this)}toJSON(){return Object.getOwnPropertyNames(this).reduce((t,s)=>{if(s==="id")return t["@"]=this.id,t;const a=this[s];return a instanceof Function||(Array.isArray(a)?(t[s]=a.filter(Boolean).map(r.serialize),t[s].length||delete t[s]):(t[s]=[r.serialize(a)].filter(Boolean),t[s].length||delete t[s])),t},{})}subscribe(){n.subscription.subscribe(this,[this.id,this.hasValue("v-s:updateCounter")?this["v-s:updateCounter"][0]:0,this.updater])}updater(e,i){new n(e).reset().catch(()=>{})}unsubscribe(){n.subscription.unsubscribe(this.id)}#e=!0;isNew(e){return typeof e>"u"?this.#e:this.#e=!!e}#t=!1;isLoaded(e){return typeof e>"u"?this.#t:this.#t=!!e}#i=!1;isSync(e){return typeof e>"u"?this.#i:this.#i=!!e}get(e){return this[e]}hasValue(e,i){if(!e&&typeof i<"u")return Object.getOwnPropertyNames(this).reduce((s,a)=>s||this.hasValue(a,i),!1);let t=typeof this[e]<"u";if(typeof i<"u"&&i!==null){const s=r.serialize(i);let a=this[e];if(a instanceof Function)return!1;a=Array.isArray(a)?a:[a],t=t&&a.some(d=>s.isEqual(r.serialize(d)))}return t}set(e,i){this[e]=i}clearValue(e){delete this[e]}addValue(e,i){if(!this.hasValue(e))this[e]=i;else{const t=this[e];Array.isArray(t)?t.push(i):this[e]=[t,i]}}removeValue(e,i){if(!e&&typeof i<"u")return Object.getOwnPropertyNames(this).forEach(t=>this.removeValue(t,i));if(this.hasValue(e,i))if(Array.isArray(this[e])){const t=r.serialize(i);this[e]=this[e].filter(s=>!t.isEqual(r.serialize(s))),this[e].length||delete this[e]}else delete this[e]}async load(e=!0){const i=await n.backend.get_individual(this.id,e);Object.getOwnPropertyNames(i).forEach(t=>{if(t==="@"||t==="id")return;const s=i[t];this[t]=Array.isArray(s)?s.map(r.parse):r.parse(s)}),this.isNew(!1),this.isSync(!0),this.isLoaded(!0)}async reset(){return await this.load(!1)}async save(){await n.backend.put_individual(this.toJSON()),this.isNew(!1),this.isSync(!0),this.isLoaded(!0)}async remove(){await n.backend.remove_individual(this.id),this.isNew(!0),this.isSync(!1),this.isLoaded(!1),this.unsubscribe()}}
