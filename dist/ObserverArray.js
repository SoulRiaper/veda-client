const u=["pop","push","shift","unshift","reverse","sort","splice"],o={get:function(e,i,n){const t=Reflect.get(e,i,n);return u.includes(i)?function(...s){const r=t.apply(e,s);return e.notify(),r}:typeof t=="function"?t.bind(e):t},set:function(e,i,n,t){return Number.isInteger(Number(i))&&e.notify(),Reflect.set(e,i,n,t)}};export default class f extends Array{#t;#e;notify(){this.#t.emit(this.#e,this),this.#t.emit("modified",this.#e,this)}constructor(i,n,...t){return super(...t),t.length===1&&Number.isInteger(t[0])&&(this[0]=t[0]),this.#t=i,this.#e=n,new Proxy(this,o)}}
